import{_ as a,c as o,a2 as r,o as t}from"./chunks/framework.DPuwY6B9.js";const w=JSON.parse('{"title":"Windows桌面开发思考：技术选择与未来趋势","description":"","frontmatter":{},"headers":[],"relativePath":"major/thoughts/Windows桌面开发思考：技术选择与未来趋势.md","filePath":"major/thoughts/Windows桌面开发思考：技术选择与未来趋势.md"}'),i={name:"major/thoughts/Windows桌面开发思考：技术选择与未来趋势.md"};function n(s,e,d,l,p,h){return t(),o("div",null,e[0]||(e[0]=[r('<h1 id="windows桌面开发思考-技术选择与未来趋势" tabindex="-1">Windows桌面开发思考：技术选择与未来趋势 <a class="header-anchor" href="#windows桌面开发思考-技术选择与未来趋势" aria-label="Permalink to &quot;Windows桌面开发思考：技术选择与未来趋势&quot;">​</a></h1><h2 id="win桌面应用开发的思考与探索" tabindex="-1">Win桌面应用开发的思考与探索 <a class="header-anchor" href="#win桌面应用开发的思考与探索" aria-label="Permalink to &quot;Win桌面应用开发的思考与探索&quot;">​</a></h2><p>在当今的开发环境中，无论是传统桌面应用还是跨平台应用，微软都给出了明确的建议。</p><p>对于想要入门Windows应用开发的开发者，微软的<a href="https://learn.microsoft.com/en-us/windows/apps/get-started/?tabs=winappsdk-winui%2Cnet-maui" target="_blank" rel="noreferrer">官方文档</a>提供了丰富的资源与指导。</p><h2 id="windows操作系统的复杂性" tabindex="-1">Windows操作系统的复杂性 <a class="header-anchor" href="#windows操作系统的复杂性" aria-label="Permalink to &quot;Windows操作系统的复杂性&quot;">​</a></h2><p>经过一整天的资料查阅与文字撰写，我意识到Windows是一个极其复杂的操作系统。微软作为一个拥有深厚历史背景的公司，其技术演变反映了历史的局限性与技术发展的必然性。在这条演进的道路上，技术的选择并不是简单的“新旧”问题，而是如何把握经典与现代技术的平衡，成为了一个值得深思的命题。</p><h2 id="winappsdk-新的开发者组件" tabindex="-1">WinAppSDK：新的开发者组件 <a class="header-anchor" href="#winappsdk-新的开发者组件" aria-label="Permalink to &quot;WinAppSDK：新的开发者组件&quot;">​</a></h2><p>Windows 应用 SDK 是一组新的开发者组件和工具，标志着Windows应用开发平台的下一步发展。它提供了统一的API与工具，旨在为从Windows 11到Windows 10版本1809的桌面应用开发提供一致的支持。</p><p>详细信息可以参考微软的<a href="https://learn.microsoft.com/zh-cn/windows/apps/windows-app-sdk/" target="_blank" rel="noreferrer">官方文档</a>以及<a href="https://developer.microsoft.com/zh-cn/windows/downloads/windows-sdk/" target="_blank" rel="noreferrer">Windows SDK下载</a>。</p><p>由于我已经安装了VS2022，因此可以省去许多繁琐的步骤。对于Win10应用开发的官方教程，您可以访问<a href="https://learn.microsoft.com/zh-cn/training/modules/get-started-with-visual-studio-for-windows10-app-dev/1-visual-studio-features" target="_blank" rel="noreferrer">这里</a>。</p><h2 id="现代化桌面应用-modernize-desktop-apps" tabindex="-1">现代化桌面应用（Modernize Desktop Apps） <a class="header-anchor" href="#现代化桌面应用-modernize-desktop-apps" aria-label="Permalink to &quot;现代化桌面应用（Modernize Desktop Apps）&quot;">​</a></h2><p>随着技术的发展，桌面应用也需要不断地进行现代化改造。以下是几个值得关注的方面：</p><ul><li><strong>语言选择</strong>：C#.NET、C++都可以选择，视具体需求而定。</li><li><strong>用户界面（UI）</strong>：WinUI3是一个非常不错的选择，它成功实现了与操作系统的解耦合。</li><li><strong>API层面</strong>：可以使用Win32或WinRT进行开发。</li><li><strong>打包格式</strong>：MSIX打包格式在一定程度上丰富了应用的打包与发布流程。</li></ul><h2 id="msvc单行版安装" tabindex="-1">MSVC单行版安装 <a class="header-anchor" href="#msvc单行版安装" aria-label="Permalink to &quot;MSVC单行版安装&quot;">​</a></h2><p>对于开发现代Win桌面应用，微软推荐使用<code>C# + xxx</code>的组合。然而，由于我有课程需要使用C++，所以不得不深入学习这一语言。虽然我对.NET技术也非常感兴趣，尤其是其多年的发展与演进。</p><p>由于VS的安装包庞大且复杂，我想到了一个解决方案：是否可以单独安装MSVC而不依赖于整个Visual Studio？我找到了一些有用的资源：</p><ul><li><p><a href="https://gist.github.com/mmozeiko/7f3162ec2988e81e56d5c4e22cde9977" target="_blank" rel="noreferrer">Standalone MSVC Gist</a>：该项目下载独立的64位MSVC编译器、链接器及其他工具，适用于64位本地桌面应用开发，而无需安装Visual Studio。</p></li><li><p>另一个更简单的选择是<a href="https://github.com/Data-Oriented-House/PortableBuildTools" target="_blank" rel="noreferrer">PortableBuildTools</a>，这个项目已经打包好了需要的工具。</p></li></ul><h2 id="回归c-现代c-的学习" tabindex="-1">回归C++：现代C++的学习 <a class="header-anchor" href="#回归c-现代c-的学习" aria-label="Permalink to &quot;回归C++：现代C++的学习&quot;">​</a></h2><p>在微软的学习平台上，我发现了很不错的现代C++教程，<a href="https://learn.microsoft.com/en-us/cpp/cpp/welcome-back-to-cpp-modern-cpp?view=msvc-170" target="_blank" rel="noreferrer">这篇文档</a>。通过这段学习过程，我感受到了微软对于现代C++（尤其是C++17）的推荐与支持，这为我后续学习C++提供了明确的方向。</p><hr><p><strong>更新于</strong>：2024年1月3日</p>',21)]))}const u=a(i,[["render",n]]);export{w as __pageData,u as default};
