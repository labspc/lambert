import{_ as i,c as a,a4 as n,o as l}from"./chunks/framework.DUbUI6ZK.js";const g=JSON.parse('{"title":"分形、递归与计算机科学","description":"","frontmatter":{},"headers":[],"relativePath":"major/thoughts/分形、递归与计算机科学.md","filePath":"major/thoughts/分形、递归与计算机科学.md"}'),p={name:"major/thoughts/分形、递归与计算机科学.md"};function h(t,s,e,k,r,E){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="分形、递归与计算机科学" tabindex="-1">分形、递归与计算机科学 <a class="header-anchor" href="#分形、递归与计算机科学" aria-label="Permalink to &quot;分形、递归与计算机科学&quot;">​</a></h1><h3 id="皮亚诺曲线" tabindex="-1">皮亚诺曲线 <a class="header-anchor" href="#皮亚诺曲线" aria-label="Permalink to &quot;皮亚诺曲线&quot;">​</a></h3><p>皮亚诺曲线是一种由意大利数学家朱塞佩·皮亚诺在1890年提出的连续曲线，通过不断细分和转换，可以覆盖一个平面区域，如正方形。令人惊讶的是，这种曲线虽然本质上是一条线（一维对象），但可以填满一个二维区域，因此被认为是一种“空间填充曲线”。</p><h3 id="希尔伯特曲线" tabindex="-1">希尔伯特曲线 <a class="header-anchor" href="#希尔伯特曲线" aria-label="Permalink to &quot;希尔伯特曲线&quot;">​</a></h3><p>希尔伯特曲线是皮亚诺曲线的一种变体，类似地也是一种空间填充曲线。它可以通过递归构建，利用四个基本变换函数，将正方形分成四个小正方形，并按特定顺序连接，从而逐渐逼近整个正方形区域。希尔伯特曲线的应用在计算机视觉（CV）领域十分广泛，用于图像处理、压缩等。</p><hr><h2 id="豪斯多夫维数与分形几何" tabindex="-1">豪斯多夫维数与分形几何 <a class="header-anchor" href="#豪斯多夫维数与分形几何" aria-label="Permalink to &quot;豪斯多夫维数与分形几何&quot;">​</a></h2><h3 id="豪斯多夫维数" tabindex="-1">豪斯多夫维数 <a class="header-anchor" href="#豪斯多夫维数" aria-label="Permalink to &quot;豪斯多夫维数&quot;">​</a></h3><p>豪斯多夫维数是一种用于描述集合或几何对象空间结构复杂度的数学概念，尤其适用于非整数维度和分形结构。它将传统的欧几里得维数扩展到了分形维数。科赫雪花曲线是一个典型的例子，其豪斯多夫维数为 ( \\log(4)/\\log(3) \\approx 1.26 )，即介于一维和二维之间。</p><p><img src="https://img.imotao.com/i/2024/03/05/65e6b8c4c8abf.png" alt="豪斯多夫维数示意图"></p><h3 id="分形几何与曼德勃罗集合" tabindex="-1">分形几何与曼德勃罗集合 <a class="header-anchor" href="#分形几何与曼德勃罗集合" aria-label="Permalink to &quot;分形几何与曼德勃罗集合&quot;">​</a></h3><p>分形几何在不同尺度上显示自相似性和复杂性，这种几何形态常见于自然界，如山脉、云朵和植物的分支系统等。曼德勃罗集合（Mandelbrot Set）是分形几何的经典代表，它通过简单的迭代公式产生复杂而美丽的图形。</p><p>以下代码绘制了曼德勃罗集合的图案：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matplotlib.pyplot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 曼德勃罗集合的迭代函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is_mandelbrot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c, max_iter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(max_iter):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max_iter</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置图像参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">width, height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x_min, x_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y_min, y_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建复平面坐标并计算每个点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X, Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.meshgrid(np.linspace(x_min, x_max, width), np.linspace(y_min, y_max, height))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">j</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iterations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.vectorize(is_mandelbrot)(C)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 绘制曼德勃罗集合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.imshow(iterations.T, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cmap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;magma&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">extent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[x_min, x_max, y_min, y_max])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.xlabel(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Re(c)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.ylabel(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Im(c)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.title(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mandelbrot Set&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.colorbar(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Iterations to Escape&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.show()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><hr><h2 id="分形与计算机科学的关联" tabindex="-1">分形与计算机科学的关联 <a class="header-anchor" href="#分形与计算机科学的关联" aria-label="Permalink to &quot;分形与计算机科学的关联&quot;">​</a></h2><h3 id="分形与递归" tabindex="-1">分形与递归 <a class="header-anchor" href="#分形与递归" aria-label="Permalink to &quot;分形与递归&quot;">​</a></h3><p>分形与递归紧密相连，许多分形图形如科赫雪花和谢尔宾斯基三角形等都通过递归算法生成。分形的构建通常是将大图形细分为小图形，这些小图形会在递归过程中重复出现。因此，递归是分形算法的基础，用于描述自然界中如海岸线和山脉的复杂形态。</p><p>分形的自相似性使它成为许多自然现象和计算机算法的模型，这些算法通过递归构建结构复杂的几何图案。</p><hr><p>分形理论在物理学、生物学、地理学和计算机科学等领域有广泛应用，例如图像处理、压缩技术和自然景观模拟等。分形概念和算法的结合，不仅帮助我们理解自然界的复杂性，也为科技创新提供了丰富的工具和灵感。</p><hr><p><strong>更新于</strong>：2024年3月28日</p>`,23)]))}const c=i(p,[["render",h]]);export{g as __pageData,c as default};
